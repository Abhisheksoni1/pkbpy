"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0qozlfce6p*#aj(@&4j*@1b2p0dre1c4g7ldey_x!pq!eyyu0_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

BASE_URL = 'http://139.59.14.145:8009/'

NOTIFY_USERS_ON_ENTER_OR_LEAVE_ROOMS = True

MSG_TYPE_MESSAGE = 0  # For standard messages
MSG_TYPE_WARNING = 1  # For yellow messages
MSG_TYPE_ALERT = 2  # For red & dangerous alerts
MSG_TYPE_MUTED = 3  # For just OK information that doesn't bother users
MSG_TYPE_ENTER = 4  # For just OK information that doesn't bother users
MSG_TYPE_LEAVE = 5  # For just OK information that doesn't bother users

MESSAGE_TYPES_CHOICES = (
    (MSG_TYPE_MESSAGE, 'MESSAGE'),
    (MSG_TYPE_WARNING, 'WARNING'),
    (MSG_TYPE_ALERT, 'ALERT'),
    (MSG_TYPE_MUTED, 'MUTED'),
    (MSG_TYPE_ENTER, 'ENTER'),
    (MSG_TYPE_LEAVE, 'LEAVE'),
)

MESSAGE_TYPES_LIST = [
    MSG_TYPE_MESSAGE,
    MSG_TYPE_WARNING,
    MSG_TYPE_ALERT,
    MSG_TYPE_MUTED,
    MSG_TYPE_ENTER,
    MSG_TYPE_LEAVE,
]


# Application definition

INSTALLED_APPS = [

    # core apps
    'core.apps.CoreConfig',

    # custom apps
    'pkbadmin.apps.PkbadminConfig',
    'website.apps.WebsiteConfig',
    'api.v1.apps.V1Config',
    'apps.authentiation.apps.AuthentiationConfig',
    'apps.users.apps.UsersConfig',
    'apps.common.apps.CommonConfig',
    'apps.stores.apps.StoresConfig',
    'apps.taxconfig.apps.TaxconfigConfig',
    'apps.discounts.apps.DiscountsConfig',
    'apps.feedback.apps.FeedbackConfig',
    'apps.orders.apps.OrdersConfig',
    'apps.payment.apps.PaymentConfig',
    # API apps
    'rest_framework',
    'rest_framework_swagger',

    # Plateform apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_extensions',
    'channels',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',

]

# CACHE_MIDDLEWARE_ALIAS = 'default'
# CACHE_MIDDLEWARE_SECONDS = 604800
# CACHE_MIDDLEWARE_KEY_PREFIX = ''

ROOT_URLCONF = 'config.routes.main_urls'

TEMPLATES = [

    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        # 'BACKEND': 'libraries.jinja2_environment.CustomJinja2',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'libraries.jinja2_environment.environment',

            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',

                #  custom processors
                'libraries.context_processors.load',
            ]

        }

    },  # This template will work as fallback as the django default admin doesn't have jinja2
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        }
    },

]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.routing.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'pkbpy',
        'USER': 'pkbpy',
        'PASSWORD': 'pkb@12345',
        'HOST': 'localhost',
        'PORT': '',
    },
}

# BASE_URL = 'http://139.59.14.145/'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# FORM_RENDERER = 'django.forms.renderers.Jinja2'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'COERCE_DECIMAL_TO_STRING': False,

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'password',
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

ALLOW_CORS = True
# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE ='Asia/Kolkata'

USE_I18N = True

USE_L10N = True

# USE_TZ = True

AUTH_USER_MODEL = 'users.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.dirname(BASE_DIR) + '/staticfiles/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "data/")

CUSTOM_DIRS = {
    'PROMO_CODE_DIR': 'promocode/',
    'STORE_DIR': 'store/',
    'KITCHEN_DIR': 'kitchens/',
    'CATEGORY_DIR': 'categories/',
    'ITEM_DIR': 'items/',
    'BANNER_DIR': 'banners/',
    'LOGO_DIR': 'logos/',
    'PAGE_DIR': 'pages',
    'TMP_DIR': 'tmp',
    'SYSTEM_DIR': 'system',
    'MAILERS_DIR': 'mailers',
    'IMAGE_DIR': 'images/',
    'USER_DIR':'users/',
    'CSV_DIR':'csv/',
}

MEDIA_URL = '/media/'

# paytm merchant key
MERCHANT_SECRET = 't&NcOIximfNRYaDn'
PAYMENT_CALLBACK_BASE_URL = 'http://139.59.14.145:8009'
ORDER_ID_PREFIX = "pkb"
# EMAIL Settings

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST_USER = 'akhilendra.yadav@codeflowtech.com'
EMAIL_HOST_PASSWORD = 'codeflowindia'

MULTIPLE_MAIL_SETTINGS = {
    'default': {
        'host': 'smtp.gmail.com',
        'port': 587,
        'user': 'suman.gadhawal@codeflowtech.com',
        'password': '9929519330',
        'tls': True
    },
    'internal': {
        'host': 'smtp.gmail.com',
        'port': 587,
        'user': 'suman.gadhawal@codeflowtech.com',
        'password': '9929519330',
        'tls': True
    },
}

MAX_STORE_ITEM = 10

# WEB_LOGIN_URL For future  use if web-application going to implement
# WEB_LOGIN_URL = '/login/'

ADMIN_LOGIN_URL = '/admin/login/'

ERROR_404 = '/admin/404/'
# /home/cft/Projects/pkbpy/application/libraries/backends.py
# Authentication backends email or mobile and fall back
AUTHENTICATION_BACKENDS = [
    'libraries.backends.EmailBackend',
    'libraries.backends.MobileBackend',
    'django.contrib.auth.backends.ModelBackend',
]

FILE_UPLOAD_HANDLERS = ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]

#CELERY_BROKER_URL = 'amqp://localhost'
# BROKER_URL = 'redis://localhost:6379'
CELERY_BROKER_URL = 'redis://localhost'
try:
    from .local_settings import *
except ImportError:
    pass


# importing logger settings
try:
    from .logging_settings import *
except Exception as e:
    # in case of any error, pass silently.
    pass
    """Put following code where you need to logging based on Error/Warning """
    #logging.getLogger("error_logger").error(repr(e))
    #logging.getLogger("info_logger").error(repr(e))

redis_host = os.environ.get('REDIS_HOST', 'localhost')


CHANNEL_LAYERS = {
    "default": {
        "CONFIG": {
            "hosts": [('localhost','6379')],
        },
        "BACKEND": "channels_redis.core.RedisChannelLayer",
    },
}